Missile Pursuit Problem
Smita Purekar; April 17, 2012

================================================
Motivation
================================================
In this report, I model a missile and interceptor to better understand nonlinear dynamics and gain more experience with using Matlab’s differential equation solver.

================================================
Method
================================================
To understand the dynamics of a pursuit problem, I first used a paper written by Molly Severdia of the College of the Redwoods. I modeled an evader travelling in a straight line at a constant speed. The pursuer started at time zero and at a constant speed, but in a curved path- with its velocity vector always pointed at the evader. 
The initial conditions (at t=0) were
	Position	Speed
Evader	(x_0,0)	V_e, straight vertical line
Pursuer	(0,0)	V_p, curved trajectory

In Matlab, I defined the position of the evader as (x_0,V_e t) and the pursuer as (x,y) at each time instance. 
I knew that since the speed of the pursuer was constant, and that it had travelled a distance of v_p t along its curve. I could then integrate the following equation to find how far it had travelled: 
v_p t=∫_0^x▒√(1+(dy/dz)^2 ) dz .
I solved the previous equation for time to find
t=1/V_p  ∫_0^x▒√(1+(dy/dz )^2 ) dz .
Then, I found the slope of the line between the pursuer and the target and solved for time to get
t=y/V_m -((x-x_0))/V_m   dy/dx  .
I set the two time equations equal to each other, and differentiated both sides to get
(d^2 y)/(dx^2 )=-(n√(1+(dy/dx)^2 ))/((x-x_0 ) )  ,where n=V_e/V_p   
To solve the equation, I used Matlab’s numerical solver, ode45. Since this is a second-order differential equation, I had to first convert it to a set of two first-order equations. I let 
u_1=y	u_2=y'	u_1^'=y'	u_2^''=y''

Substitution yielded 
u_1^'=u_2
u_2^'=(-n√(1+u_2^2  ))/(x-x_0 )  .
I then input these into Matlab using ode45 to create the following model: 
The code I used to generate this plot is attached in Appendix A.

================================================
Experiment
================================================
To further understand the missile pursuit problem, I decided to modify some more parameters and see the results.
First, I changed the differential equations for the missile to be varying n time. I used:
p(t)=〖2 sin〗⁡〖-3t〗
q(t)=2 cos⁡〖-t〗
dp/dt=-6 cos⁡〖-3t〗
dq/dt=2 sin⁡〖-t〗
I solved these equations using a similar Matlab code to create the following model: 
The code I used to generate this plot is attached in Appendix B.
By varying the value of n, I was able to alter the difference between the speed of the missile and interceptor to see how that would affect my results. I found that with a smaller disparity in speeds, the interceptor was able to reach the missile in less time, and track its trajectory more accurately. Several plots generated by varying n are shown in Appendix C. 

================================================
Assumptions
================================================
To model this relationship in Matlab, I had to assume that the missile and interceptor exist in their own universe with no unforeseen obstacles in their paths. To model this curve, I also assumed the velocity of the interceptor is pointed directly towards the missile at each time step.

================================================
Conclusion 
================================================
Through this project I gained a better understanding of missile pursuit and controls. I realized how to design a basic missile and interceptor program and modify its parameters to achieve different results. If I were to do further research on this topic, I would program the interceptor to follow the missile’s trajectory and make expand the project to make it three-dimensional. 

================================================
Appendix A
================================================
The following codes were used to model the pursuer and evader described in the first part of the project.
tspan=[0,15];
init=[0,0];
n=.3;
x0=10;
 
[t,u] = ode45(@piratechase,tspan,init,[],n,x0);
 
y=linspace(0,4);
x1=x0*ones(size(y));
plot(t,u(:,1),x1,y,'r--')
legend('Pursuer','Evader');
title('Evader vs. Pursuer')
xlabel('x')
ylabel('y')


function uprime = piratechase(x,u,n,x0)
uprime = zeros(2,1);
uprime(1) = u(2);
uprime(2) = -n*sqrt(1+(u(2))^2)/(x-x0);


================================================ 
Appendix B
================================================
The following codes were used to model the missile and interceptor described in the second part of the project.
clear all;
clc; clf;
 
t=linspace(0,1.5*pi,500);
y=2*cos(-t);
x=2*sin(-3*t);
 
[t,Y]=ode45('interceptor',[0,1.5*pi],[0;0],[],0.9);
 
plot(x,y,'b',Y(:,1),Y(:,2),'r');
legend('Missile','Interceptor');
title('Missile vs. Interceptor')
xlabel('x')
ylabel('y')


function Yprime=interceptor(t,y,~,k)
Yprime = zeros(2,1);
 
Q=2*cos(-t);
P=2*sin(-3*t);
 
dQ=2*sin(-t);
dP=-6*cos(-3*t);
 
Yprime(1)= k * (sqrt((dP)^2 + (dQ)^2) * (P - y(1))) / (sqrt((P - y(1))^2 + (Q - y(2))^2));
Yprime(2)= k * (sqrt((dP)^2 + (dQ)^2) * (Q - y(2))) / (sqrt((P - y(1))^2 + (Q - y(2))^2));
